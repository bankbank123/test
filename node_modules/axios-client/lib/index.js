'use strict';

exports.__esModule = true;
exports.Endpoint = exports.RestClient = exports.Request = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _axiosRetry = require('axios-retry');

var _axiosRetry2 = _interopRequireDefault(_axiosRetry);

var _stringTemplate = require('string-template');

var _stringTemplate2 = _interopRequireDefault(_stringTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var inRange = function inRange(value, min, max) {
    return value >= min && value <= max;
};

var axiosConfig = {
    baseURL: "/",
    timeout: 3000
};

var client = _axios2.default.create(axiosConfig);

client.interceptors.request.use(function (config) {
    return config;
}, function (error) {
    return Promise.reject(error);
});

client.interceptors.response.use(function (response) {
    return response;
}, function (error) {
    console.log("interceptors response error");
    return Promise.reject(error);
});

(0, _axiosRetry2.default)(client, {
    retries: 3,
    retryDelay: function retryDelay(retryCount) {
        return retryCount * 500;
    }
});

var Request = exports.Request = { GET: "get", POST: "post", PUT: "put", DELETE: "delete" };

var RestClient = exports.RestClient = {
    call: function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(endpoint, urlParams, postValue) {
            var formatedUrl, requestConfig, response;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            formatedUrl = urlParams ? (0, _stringTemplate2.default)(endpoint.uri, urlParams) : endpoint.uri;
                            requestConfig = {
                                url: formatedUrl,
                                method: endpoint.method
                            };


                            if (endpoint.method != Request.GET) {
                                requestConfig['data'] = postValue;
                            }

                            _context.prev = 3;
                            _context.next = 6;
                            return client.request(requestConfig);

                        case 6:
                            response = _context.sent;
                            return _context.abrupt('return', transformResponse(response));

                        case 10:
                            _context.prev = 10;
                            _context.t0 = _context['catch'](3);

                            if (!_context.t0.response) {
                                _context.next = 14;
                                break;
                            }

                            return _context.abrupt('return', transformResponse(_context.t0.response));

                        case 14:
                            throw _context.t0;

                        case 15:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[3, 10]]);
        }));

        return function call(_x, _x2, _x3) {
            return _ref.apply(this, arguments);
        };
    }()
};

var wrapAxiosResponse = function wrapAxiosResponse(axiosResponse) {
    var _wrappedResponse;

    var wrappedResponse = (_wrappedResponse = {
        status: axiosResponse.status,
        statusText: axiosResponse.statusText,
        config: axiosResponse.config,
        headers: axiosResponse.headers
    }, _wrappedResponse['status'] = axiosResponse.status, _wrappedResponse.data = axiosResponse.data, _wrappedResponse);

    wrappedResponse.isOk = wrappedResponse.status == 200;
    wrappedResponse.isCreated = wrappedResponse.status == 201;
    wrappedResponse.isBadRequest = wrappedResponse.status == 400;
    wrappedResponse.isForbidden = wrappedResponse.status == 403;
    wrappedResponse.isNotFound = wrappedResponse.status == 404;
    wrappedResponse.isServerError = wrappedResponse.status == 500;

    wrappedResponse.isSuccessful = inRange(wrappedResponse.status, 200, 299);
    wrappedResponse.isClientError = inRange(wrappedResponse.status, 400, 499);

    return wrappedResponse;
};

var transformResponse = function transformResponse(response) {
    var wrappedResponse = wrapAxiosResponse(response);

    return wrappedResponse;
};

var Endpoint = exports.Endpoint = function Endpoint(method, url) {
    return {
        uri: url,
        method: method
    };
};

var apiWrapper = { RestClient: RestClient, Endpoint: Endpoint, Request: Request };
exports.default = apiWrapper;